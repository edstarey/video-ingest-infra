name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-check:
    name: 'Terraform Check'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: |
        for env in dev staging prod; do
          if [ -d "environments/$env" ]; then
            echo "Validating $env environment..."
            cd environments/$env
            terraform init -backend=false
            terraform validate
            cd ../..
          fi
        done

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-check
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        soft_fail: true

  cost-estimation:
    name: 'Cost Estimation'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost diff
      run: |
        for env in dev staging prod; do
          if [ -d "environments/$env" ]; then
            echo "Generating cost estimate for $env..."
            cd environments/$env
            infracost breakdown --path . --terraform-var-file terraform.tfvars --format json --out-file /tmp/infracost-$env.json
            cd ../..
          fi
        done

    - name: Post Infracost comment
      run: |
        infracost comment github --path /tmp/infracost-*.json \
          --repo $GITHUB_REPOSITORY \
          --github-token ${{ github.token }} \
          --pull-request ${{ github.event.pull_request.number }} \
          --behavior update

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, staging]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/${{ matrix.environment }}
      run: terraform init

    - name: Terraform Plan
      working-directory: environments/${{ matrix.environment }}
      run: |
        terraform plan -var-file="terraform.tfvars" -out="${{ matrix.environment }}.tfplan"
        terraform show -no-color ${{ matrix.environment }}.tfplan > ${{ matrix.environment }}-plan.txt

    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.environment }}-plan
        path: environments/${{ matrix.environment }}/${{ matrix.environment }}-plan.txt

    - name: Comment Plan
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('environments/${{ matrix.environment }}/${{ matrix.environment }}-plan.txt', 'utf8');
          const maxGitHubBodyCharacters = 65536;
          
          function chunkSubstr(str, size) {
            const numChunks = Math.ceil(str.length / size)
            const chunks = new Array(numChunks)
            for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
              chunks[i] = str.substr(o, size)
            }
            return chunks
          }
          
          const planChunks = chunkSubstr(plan, maxGitHubBodyCharacters);
          
          for (let i = 0; i < planChunks.length; i++) {
            const output = `### Terraform Plan for ${{ matrix.environment }} (${i + 1}/${planChunks.length})
            
            \`\`\`
            ${planChunks[i]}
            \`\`\``;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: [dev]
    environment: ${{ matrix.environment }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/${{ matrix.environment }}
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/${{ matrix.environment }}
      run: terraform apply -var-file="terraform.tfvars" -auto-approve

  terraform-apply-staging:
    name: 'Terraform Apply Staging'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/staging
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/staging
      run: terraform apply -var-file="terraform.tfvars" -auto-approve

  terraform-apply-prod:
    name: 'Terraform Apply Production'
    runs-on: ubuntu-latest
    needs: [terraform-apply-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/prod
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/prod
      run: terraform apply -var-file="terraform.tfvars" -auto-approve
