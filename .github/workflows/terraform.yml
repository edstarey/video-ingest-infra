name: 'Terraform Cloud Integration'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.5.0'
  TF_CLOUD_ORGANIZATION: 'edstarey-video-ingest'
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  terraform-check:
    name: 'Terraform Check'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      run: |
        for env in dev staging prod; do
          if [ -d "environments/$env" ]; then
            echo "Validating $env environment..."
            cd environments/$env
            terraform init -backend=false
            terraform validate
            cd ../..
          fi
        done

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-check
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        soft_fail: true

  cost-estimation:
    name: 'Cost Estimation'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Infracost diff
      run: |
        for env in dev staging prod; do
          if [ -d "environments/$env" ]; then
            echo "Generating cost estimate for $env..."
            cd environments/$env
            infracost breakdown --path . --terraform-var-file terraform.tfvars --format json --out-file /tmp/infracost-$env.json
            cd ../..
          fi
        done

    - name: Post Infracost comment
      run: |
        infracost comment github --path /tmp/infracost-*.json \
          --repo $GITHUB_REPOSITORY \
          --github-token ${{ github.token }} \
          --pull-request ${{ github.event.pull_request.number }} \
          --behavior update

  terraform-cloud-plan:
    name: 'Trigger Terraform Cloud Plan'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        workspace: [video-ingest-dev, video-ingest-staging]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Trigger Terraform Cloud Plan
      uses: hashicorp/tfc-workflows-github@v1.0.0
      id: plan
      with:
        token: ${{ secrets.TF_API_TOKEN }}
        organization: ${{ env.TF_CLOUD_ORGANIZATION }}
        workspace: ${{ matrix.workspace }}
        directory: environments/${{ matrix.workspace == 'video-ingest-dev' && 'dev' || 'staging' }}
        comment: "Triggered by PR #${{ github.event.number }}"

    - name: Comment Plan Results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `### Terraform Cloud Plan Results for ${{ matrix.workspace }}

          **Plan Status**: ${{ steps.plan.outputs.plan-status }}
          **Plan URL**: ${{ steps.plan.outputs.plan-url }}

          View detailed plan results in [Terraform Cloud](${{ steps.plan.outputs.plan-url }})`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-cloud-apply:
    name: 'Trigger Terraform Cloud Apply'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        workspace: [video-ingest-dev]
    environment: ${{ matrix.workspace }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Trigger Terraform Cloud Apply
      uses: hashicorp/tfc-workflows-github@v1.0.0
      id: apply
      with:
        token: ${{ secrets.TF_API_TOKEN }}
        organization: ${{ env.TF_CLOUD_ORGANIZATION }}
        workspace: ${{ matrix.workspace }}
        directory: environments/${{ matrix.workspace == 'video-ingest-dev' && 'dev' || 'staging' }}
        comment: "Auto-apply from main branch commit ${{ github.sha }}"

    - name: Apply Results
      run: |
        echo "Apply Status: ${{ steps.apply.outputs.apply-status }}"
        echo "Apply URL: ${{ steps.apply.outputs.apply-url }}"

  terraform-apply-staging:
    name: 'Terraform Apply Staging'
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/staging
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/staging
      run: terraform apply -var-file="terraform.tfvars" -auto-approve

  terraform-apply-prod:
    name: 'Terraform Apply Production'
    runs-on: ubuntu-latest
    needs: [terraform-apply-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      working-directory: environments/prod
      run: terraform init

    - name: Terraform Apply
      working-directory: environments/prod
      run: terraform apply -var-file="terraform.tfvars" -auto-approve
